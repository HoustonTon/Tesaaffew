import { useState } from 'react'
import { useNavigate } from 'react-router-dom'
import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Divider,
  Alert,
  Snackbar,
  Stack
} from '@mui/material'
import ShoppingCartIcon from '@mui/icons-material/ShoppingCart'
import CheckCircleIcon from '@mui/icons-material/CheckCircle'
import ArrowBackIcon from '@mui/icons-material/ArrowBack'
import { sendTelegramNotification } from '../utils/telegram'

function Cart() {
  const navigate = useNavigate()
  const [orderPlaced, setOrderPlaced] = useState(false)
  const cart = JSON.parse(localStorage.getItem('cart') || '[]')
  const user = JSON.parse(localStorage.getItem('user') || '{}')

  const total = cart.reduce((sum, item) => sum + item.price, 0)
  const totalRub = total * 117

  const handlePlaceOrder = async () => {
    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
      const orderDetails = cart.map(item => 
        `${item.product.name} - $${item.price} (‚ÇΩ${item.price * 117})`
      ).join('\n')

      const message = `
üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!

üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å:
–ò–º—è: ${user.nickname}
Email: ${user.email}

üõçÔ∏è –ó–∞–∫–∞–∑:
${orderDetails}

üí∞ –ò—Ç–æ–≥–æ: $${total} (‚ÇΩ${totalRub})
      `.trim()

      await sendTelegramNotification(message)
      setOrderPlaced(true)
      localStorage.removeItem('cart')
    } catch (error) {
      console.error('Error sending notification:', error)
    }
  }

  const handleContinueShopping = () => {
    navigate('/products')
  }

  if (cart.length === 0) {
    return (
      <Box sx={{ textAlign: 'center', mt: 4 }}>
        <Typography variant="h5" gutterBottom>
          –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞
        </Typography>
        <Button
          variant="contained"
          startIcon={<ArrowBackIcon />}
          onClick={handleContinueShopping}
          sx={{ mt: 2 }}
        >
          –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–∞–º
        </Button>
      </Box>
    )
  }

  return (
    <Box>
      <Typography variant="h4" component="h1" gutterBottom align="center">
        –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞
      </Typography>

      <Card sx={{ mb: 3 }}>
        <CardContent>
          <List>
            {cart.map((item) => (
              <ListItem key={item.id}>
                <ListItemIcon sx={{ color: item.product.color }}>
                  {item.product.icon}
                </ListItemIcon>
                <ListItemText
                  primary={item.product.name}
                  secondary={`$${item.price} (‚ÇΩ${item.price * 117})`}
                />
              </ListItem>
            ))}
            <Divider sx={{ my: 2 }} />
            <ListItem>
              <ListItemText
                primary={
                  <Typography variant="h6">
                    –ò—Ç–æ–≥–æ: ${total} (‚ÇΩ{totalRub})
                  </Typography>
                }
              />
            </ListItem>
          </List>
        </CardContent>
      </Card>

      <Stack direction="row" spacing={2}>
        <Button
          variant="outlined"
          size="large"
          fullWidth
          onClick={handleContinueShopping}
          startIcon={<ArrowBackIcon />}
        >
          –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏
        </Button>
        <Button
          variant="contained"
          size="large"
          fullWidth
          onClick={handlePlaceOrder}
          startIcon={<CheckCircleIcon />}
        >
          –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑
        </Button>
      </Stack>

      <Snackbar
        open={orderPlaced}
        autoHideDuration={6000}
        onClose={() => setOrderPlaced(false)}
      >
        <Alert severity="success" sx={{ width: '100%' }}>
          –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.
        </Alert>
      </Snackbar>
    </Box>
  )
}

export default Cart
